{"version":3,"sources":["components/AutoComplete/AutoCompleteItem.js","components/AutoComplete/index.js","pages/CountrySearch/index.js"],"names":["AutoCompleteItem","name","capital","region","flag","onSelectItem","isHighlighted","className","onClick","src","alt","style","width","AutoComplete","data","onSelect","useState","isVisbile","setVisiblity","search","setSearch","cursor","setCursor","searchContainer","useRef","searchResultRef","useEffect","window","addEventListener","handleClickOutside","removeEventListener","scrollIntoView","position","current","parentNode","scrollTo","top","behavior","suggestions","length","listItems","Array","from","children","offsetTop","useMemo","filter","item","toLowerCase","includes","event","contains","target","hideSuggestion","showSuggestion","height","ref","type","autoComplete","value","onChange","e","onKeyDown","key","c","keyboardNavigation","map","idx","AutocompletePage","country","setcountry","Header","title","ExternalInfo","page","CountriesList","icon","JSON","stringify"],"mappings":"gNA+BeA,EA7BU,SAAC,GAOnB,IANHC,EAME,EANFA,KACAC,EAKE,EALFA,QACAC,EAIE,EAJFA,OACAC,EAGE,EAHFA,KACAC,EAEE,EAFFA,aACAC,EACE,EADFA,cAEA,OACI,wBACIC,UAAS,0BACLD,EAAgB,qBAAuB,IAE3CE,QAASH,GAET,yBAAKE,UAAU,OACX,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,uCACRN,EAAM,IACP,yBAAKQ,IAAKL,EAAMM,IAAI,GAAGC,MAAO,CAAEC,MAAO,WAE3C,uBAAGL,UAAU,4BAA4BJ,GACzC,uBAAGI,UAAU,mCAAmCL,OC8FrDW,EAnHM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACPC,oBAAS,GADF,mBAClCC,EADkC,KACvBC,EADuB,OAEbF,mBAAS,IAFI,mBAElCG,EAFkC,KAE1BC,EAF0B,OAGbJ,oBAAU,GAHG,mBAGlCK,EAHkC,KAG1BC,EAH0B,KAKnCC,EAAkBC,iBAAO,MACzBC,EAAkBD,iBAAO,MAE/BE,qBAAU,WAGN,OAFAC,OAAOC,iBAAiB,YAAaC,GAE9B,WACHF,OAAOG,oBAAoB,YAAaD,MAE7C,IAEH,IAAME,EAAiB,SAAAC,GACnBP,EAAgBQ,QAAQC,WAAWC,SAAS,CACxCC,IAAKJ,EACLK,SAAU,YAIlBX,qBAAU,WACN,GAAIL,EAAS,GAAKA,EAASiB,EAAYC,SAAWd,EAC9C,OAAO,aAGX,IAAIe,EAAYC,MAAMC,KAAKjB,EAAgBQ,QAAQU,UACnDH,EAAUnB,IAAWU,EAAeS,EAAUnB,GAAQuB,aACvD,CAACvB,IAEJ,IAAMiB,EAAcO,mBAAQ,WACxB,OAAK1B,GAELG,GAAW,GACXS,EAAe,GAERjB,EAAKgC,QAAO,SAAAC,GAAI,OACnBA,EAAK9C,KAAK+C,cAAcC,SAAS9B,EAAO6B,mBANxBlC,IAQrB,CAACA,EAAMK,IAEJU,EAAqB,SAAAqB,GAEnB3B,EAAgBU,UACfV,EAAgBU,QAAQkB,SAASD,EAAME,SAExCC,KAIFC,EAAiB,kBAAMpC,GAAa,IAEpCmC,EAAiB,kBAAMnC,GAAa,IAwB1C,OACI,yBAAKP,MAAO,CAAE4C,OAAQ,QAAUC,IAAKjC,GACjC,2BACIkC,KAAK,OACLxD,KAAK,SACLM,UAAU,aACVmD,aAAa,MACbC,MAAOxC,EACPX,QAAS8C,EACTM,SAAU,SAAAC,GAAC,OAAIzC,EAAUyC,EAAET,OAAOO,QAClCG,UAAW,SAAAD,GAAC,OAhCG,SAAAA,GACT,cAAVA,EAAEE,MACF9C,EACMK,GAAU,SAAA0C,GAAC,OAAKA,EAAI1B,EAAYC,OAAS,EAAIyB,EAAI,EAAIA,KACrDV,KAGI,YAAVO,EAAEE,KACFzC,GAAU,SAAA0C,GAAC,OAAKA,EAAI,EAAIA,EAAI,EAAI,KAGtB,WAAVH,EAAEE,KACFV,IAGU,UAAVQ,EAAEE,KAAmB1C,EAAS,IAC9BD,EAAUkB,EAAYjB,GAAQpB,MAC9BoD,IACAtC,EAASuB,EAAYjB,KAcD4C,CAAmBJ,MAGvC,yBACItD,UAAS,wBACLU,EAAY,UAAY,cAG5B,wBAAIV,UAAU,aAAaiD,IAAK/B,GAC3Ba,EAAY4B,KAAI,SAACnB,EAAMoB,GAAP,OACb,kBAAC,EAAD,eACIJ,IAAKhB,EAAK9C,KACVI,aAAc,WACVgD,IACAjC,EAAU2B,EAAK9C,MACfc,EAASgC,IAEbzC,cAAee,IAAW8C,GACtBpB,W,2BChEjBqB,UArCU,WAAO,IAAD,EACGpD,mBAAS,IADZ,mBACpBqD,EADoB,KACXC,EADW,KAE3B,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,uCAEd,kBAACC,EAAA,EAAD,CAAcC,KAAK,iBAEnB,yBAAKnE,UAAU,OACX,yBAAKA,UAAU,mBACX,iDACA,oEACA,yBAAKA,UAAU,sCACX,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CACIO,KAAM6D,EACN5D,SAAU,SAAAsD,GAAO,OAAIC,EAAWD,MAGpC,kBAAC,IAAD,CACIO,KAAK,SACLrE,UAAU,sBAKrB8D,GACG,yBAAK9D,UAAU,aACVsE,KAAKC,UAAUT,EAAS,EAAG","file":"static/js/42.683c8248.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AutoCompleteItem = ({\n    name,\n    capital,\n    region,\n    flag,\n    onSelectItem,\n    isHighlighted\n}) => {\n    return (\n        <li\n            className={`list-group-item ${\n                isHighlighted ? \"active highlighted\" : \"\"\n            }`}\n            onClick={onSelectItem}\n        >\n            <div className=\"row\">\n                <div className=\"col text-left\">\n                    <p className=\"mb-0 font-weight-bold line-height-1\">\n                        {name}{\" \"}\n                        <img src={flag} alt=\"\" style={{ width: \"30px\" }} />\n                    </p>\n                    <p className=\"mb-0 badge badge-primary\">{region}</p>\n                    <p className=\"mb-0 ml-2 badge badge-secondary\">{capital}</p>\n                </div>\n            </div>\n        </li>\n    );\n};\n\nexport default AutoCompleteItem;\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport AutoCompleteItem from \"./AutoCompleteItem\";\n\nconst AutoComplete = ({ data, onSelect }) => {\n    const [isVisbile, setVisiblity] = useState(false);\n    const [search, setSearch] = useState(\"\");\n    const [cursor, setCursor] = useState(-1);\n\n    const searchContainer = useRef(null);\n    const searchResultRef = useRef(null);\n\n    useEffect(() => {\n        window.addEventListener(\"mousedown\", handleClickOutside);\n\n        return () => {\n            window.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, []);\n\n    const scrollIntoView = position => {\n        searchResultRef.current.parentNode.scrollTo({\n            top: position,\n            behavior: \"smooth\"\n        });\n    };\n\n    useEffect(() => {\n        if (cursor < 0 || cursor > suggestions.length || !searchResultRef) {\n            return () => {};\n        }\n\n        let listItems = Array.from(searchResultRef.current.children);\n        listItems[cursor] && scrollIntoView(listItems[cursor].offsetTop);\n    }, [cursor]);\n\n    const suggestions = useMemo(() => {\n        if (!search) return data;\n\n        setCursor(-1);\n        scrollIntoView(0);\n\n        return data.filter(item =>\n            item.name.toLowerCase().includes(search.toLowerCase())\n        );\n    }, [data, search]);\n\n    const handleClickOutside = event => {\n        if (\n            searchContainer.current &&\n            !searchContainer.current.contains(event.target)\n        ) {\n            hideSuggestion();\n        }\n    };\n\n    const showSuggestion = () => setVisiblity(true);\n\n    const hideSuggestion = () => setVisiblity(false);\n\n    const keyboardNavigation = e => {\n        if (e.key === \"ArrowDown\") {\n            isVisbile\n                ? setCursor(c => (c < suggestions.length - 1 ? c + 1 : c))\n                : showSuggestion();\n        }\n\n        if (e.key === \"ArrowUp\") {\n            setCursor(c => (c > 0 ? c - 1 : 0));\n        }\n\n        if (e.key === \"Escape\") {\n            hideSuggestion();\n        }\n\n        if (e.key === \"Enter\" && cursor > 0) {\n            setSearch(suggestions[cursor].name);\n            hideSuggestion();\n            onSelect(suggestions[cursor]);\n        }\n    };\n\n    return (\n        <div style={{ height: \"100%\" }} ref={searchContainer}>\n            <input\n                type=\"text\"\n                name=\"search\"\n                className=\"search-bar\"\n                autoComplete=\"off\"\n                value={search}\n                onClick={showSuggestion}\n                onChange={e => setSearch(e.target.value)}\n                onKeyDown={e => keyboardNavigation(e)}\n            />\n\n            <div\n                className={`search-result ${\n                    isVisbile ? \"visible\" : \"invisible\"\n                }`}\n            >\n                <ul className=\"list-group\" ref={searchResultRef}>\n                    {suggestions.map((item, idx) => (\n                        <AutoCompleteItem\n                            key={item.name}\n                            onSelectItem={() => {\n                                hideSuggestion();\n                                setSearch(item.name);\n                                onSelect(item);\n                            }}\n                            isHighlighted={cursor === idx ? true : false}\n                            {...item}\n                        />\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default AutoComplete;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Header from \"components/Header\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Autocomplete from \"components/AutoComplete\";\nimport CountriesList from \"resources/data/countries-list.json\";\nimport \"./index.css\";\nimport ExternalInfo from \"components/ExternalInfo\";\n\nconst AutocompletePage = () => {\n    const [country, setcountry] = useState(\"\");\n    return (\n        <>\n            <Header title=\"Building An Auto complete Comonent\" />\n\n            <ExternalInfo page=\"autocomplete\" />\n\n            <div className=\"row\">\n                <div className=\"col text-center\">\n                    <h2>Search Country!!!</h2>\n                    <p>You can search a country by it's name</p>\n                    <div className=\"d-flex justify-content-center mb-3\">\n                        <div className=\"search-bar-container\">\n                            <Autocomplete\n                                data={CountriesList}\n                                onSelect={country => setcountry(country)}\n                            />\n\n                            <FontAwesomeIcon\n                                icon=\"search\"\n                                className=\"search-bar-icon\"\n                            />\n                        </div>\n                    </div>\n\n                    {country && (\n                        <pre className=\"text-left\">\n                            {JSON.stringify(country, 0, 2)}\n                        </pre>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default AutocompletePage;\n"],"sourceRoot":""}